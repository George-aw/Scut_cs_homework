/****************************************************/
/* File: cgen.c                                     */
/* The code generator implementation                */
/* for the TINY compiler                            */
/* (generates code for the TM machine)              */
/* Compiler Construction: Principles and Practice   */
/* Kenneth C. Louden                                */
/****************************************************/

#include "globals.h"
#include "symtab.h"
#include "code.h"
#include "cgen.h"
#include"UTIL.H"

/* tmpOffset is the memory offset for temps
It is decremented each time a temp is
stored, and incremeted when loaded again
*/
static int tmpOffset = 0;

/* prototype for internal recursive code generator */
static void cGen (TreeNode * tree);//保留
static void genExp( TreeNode * tree);
static void genBoolExp(TreeNode*tree,int e_true,int e_false);
static void genJudge(TreeNode*t);
static void genIfThenElse(TreeNode*t,int next);
static void genStmt( TreeNode * tree,int next);
static void genStmt_seq(TreeNode*tree,int next);
static void genRepeat(TreeNode*t,int next);
static void genWhile(TreeNode*t,int next);
static int newLabel();
static int newExp();

int labelIndex=0;
int expIndex=0;
char*midcode="";
char s[20];
char p1[4],p2[4],p3[4];
/* Procedure genStmt generates code at a statement node */
static int newExp()
{
	return expIndex++;
}
static int newLabel()
{
	return labelIndex++;
}
static void genJudge(TreeNode*t,int e_true, int e_false)
{
	strcat(midcode,"if ");
	switch(t->child[0]->attr.op)
	{
	case AND:
	case OR:
		genBoolExp(t->child[0],e_true,e_false);	
		break;
	default:
		genExp(t->child[0]);
		break;
	}
	strcat(midcode," goto L");
	strcat(midcode,itoa(e_true,s,10));
	strcat(midcode,"\n");
	if (t->child[2]!=NULL)
	{
		strcat(midcode,"goto L");
		strcat(midcode,itoa(e_false,s,10));
		strcat(midcode,"\n");
	}
}
static void genIfThenElse(TreeNode*t,int next)
{
	int e_true=newLabel(),e_false=next;
	if (t->child[2]!=NULL)
	{
		e_false=newLabel();
	}
	genJudge(t,e_true,e_false);
	strcat(midcode,"goto L");
	strcat(midcode,itoa(next,s,10));
	strcat(midcode,"\n");
	strcat(midcode,"Label ");
	strcat(midcode,itoa(e_true,s,10));
	strcat(midcode,"\n");
	genStmt_seq(t->child[1],next);
	if (t->child[2]!=NULL)
	{
		strcat(midcode,"   Label "+e_false);
		strcat(midcode,itoa(e_false,s,10));
		strcat(midcode,"\n");
		genStmt_seq(t->child[2],next);
	}		
	strcat(midcode,"Label ");
	strcat(midcode,itoa(next,s,10));
	strcat(midcode,"\n");
}
static void genRepeat(TreeNode*t,int next)
{
	int s_beg=newLabel(),seq_next=s_beg;
	int e_true=newLabel(),e_false=next;
	strcat(midcode,"Label ");
	strcat(midcode,itoa(s_beg,s,10));
	strcat(midcode,"\n");
	genStmt_seq(t->child[0],seq_next);
	//genJudge(t,e_true,e_false);
	strcat(midcode,"if ");
	switch(t->child[1]->attr.op)
	{
	case AND:
	case OR:
		genBoolExp(t->child[1],e_true,e_false);	
		break;
	default:
		genExp(t->child[1]);
		break;
	}
	strcat(midcode," goto L");
	strcat(midcode,itoa(e_true,s,10));
	strcat(midcode,"\n");

	strcat(midcode,"goto L");
	strcat(midcode,itoa(next,s,10));
	strcat(midcode,"\n");
	strcat(midcode,"Label");
	strcat(midcode,itoa(next,s,10));
	strcat(midcode,"\n");
}
static void genWhile(TreeNode*t,int next)
{
	int s_beg=newLabel(),seq_next=newLabel();
	int e_true=newLabel(),e_false=next;
	strcat(midcode,"Label ");
	strcat(midcode,itoa(s_beg,s,10));
	strcat(midcode,"\n");
	genJudge(t,e_true,e_false);
	strcat(midcode,"goto L");
	strcat(midcode,itoa(e_false,s,10));
	strcat(midcode,"\n");
	strcat(midcode,"Label ");
	strcat(midcode,itoa(e_true,s,10));
	strcat(midcode,"\n");
	genStmt_seq(t->child[1],seq_next);
	strcat(midcode,"goto L");
	strcat(midcode,itoa(s_beg,s,10));
	strcat(midcode,"\n");
	strcat(midcode,"Label ");
	strcat(midcode,itoa(next,s,10));
	strcat(midcode,"\n");
}
static void genStmt_seq(TreeNode*t,int next)
{
	int label=newLabel();
	
	if (t->sibling!=NULL)
	{
		genStmt(t,label);
		genStmt_seq(t->sibling,next);
	}
	else
	{
		genStmt(t,next);
	}
}
static void genStmt( TreeNode * tree,int next)//修改，最好每种节点一个函数
{ 
	int expIndex=0;
	switch (tree->kind.stmt) 
	{
	case IfK :
		genIfThenElse(tree,next);
		break; /* if_k */

	case RepeatK:
		
		genRepeat(tree,next);
		
		break; /* repeat */
	case WhileK:
		genWhile(tree,next);
		break;
	case AssignK:
		strcat(midcode,tree->attr.name);
		if (tree->child[0]->kind.exp==OpK)
		{
		strcat(midcode,":=t");
		expIndex=newExp();
		strcat(midcode,itoa(expIndex,s,10));
		strcat(midcode,"\n");
		strcat(midcode,"t");
		strcat(midcode,itoa(expIndex,s,10));
		strcat(midcode,":=");
		}
		else
		{
			strcat(midcode,":=");
		}
		genExp(tree->child[0]);
		strcat(midcode,"\n");
		break; /* assign_k */

	case ReadK:
		strcat(midcode,"read ");
		strcat(midcode,tree->attr.name);
		strcat(midcode,"\n");
		break;
	case WriteK:
		strcat(midcode,"write ");
		genExp(tree->child[0]);
		strcat(midcode,"\n");
		break;
	default:
		break;
	}
} /* genStmt */

/* Procedure genExp generates code at an expression node */
static void genCmpExp(TreeNode*tree)
{
	switch (tree->attr.op) 
	{
	case LT :
		strcat(midcode,"<");
		break;
	case EQ :
		strcat(midcode,"==");
		break;
	case RT :
		strcat(midcode,">");
		break;
	case LTEQ :
		strcat(midcode,"<=");
		break;
	case RTEQ :
		strcat(midcode,">=");
		break;
	default:
		strcat(midcode,"BUG: Unknown operator");
		break;
	}
}
static void genExp( TreeNode * tree)
{ 
	int expIndex=0;
	switch (tree->kind.exp) 
	{
	case ConstK :
		strcat(midcode,itoa(tree->attr.val,s,10));
		break; /* ConstK */
	case StringK:
		strcat(midcode,tree->attr.name);
		break;
	case IdK :
		strcat(midcode,tree->attr.name);
		break; /* IdK */
	case OpK :
		/* gen code for ac = left arg */
		genExp(tree->child[0]);
		/* gen code to push left operand */
		
		switch (tree->attr.op) {
		case PLUS :
			strcat(midcode,"+");
			break;
		case MINUS :
			strcat(midcode,"-");
			break;
		case TIMES :
			strcat(midcode,"*");
			break;
		case OVER :
			strcat(midcode,"/");
			break;
		case LT :
			strcat(midcode,"<");
			break;
		case EQ :
			strcat(midcode,"==");
			break;
		case RT :
			strcat(midcode,">");
			break;
		case LTEQ :
			strcat(midcode,"<=");
			break;
		case RTEQ :
			strcat(midcode,">=");
			break;
		default:
			strcat(midcode,"BUG: Unknown operator");
			break;
		} /* case op */
		/* gen code for ac = right operand */
		genExp(tree->child[1]);
		/* now load left operand */
		break; /* OpK */
	default:
		break;
	}

	

} /* genExp */
static void genBoolExp(TreeNode*tree,int e_true,int e_false)
{
	int childLabel=newLabel();
	genExp(tree->child[0]);
	switch (tree->attr.op) 
	{
	case AND:
		strcat(midcode," goto L");
		strcat(midcode,itoa(childLabel,s,10));
		strcat(midcode,"\n");
		strcat(midcode,"goto L");
		strcat(midcode,itoa(e_false,s,10));
		strcat(midcode,"\n");
		strcat(midcode,"Label");
		strcat(midcode,itoa(childLabel,s,10));
		strcat(midcode,"\n");
		break;
	case OR:
		strcat(midcode,"goto L");
		strcat(midcode,itoa(e_true,s,10));
		strcat(midcode,"\n");
		strcat(midcode,"goto L");
		strcat(midcode,itoa(childLabel,s,10));
		strcat(midcode,"\n");
		strcat(midcode,"Label");
		strcat(midcode,itoa(childLabel,s,10));
		strcat(midcode,"\n");
		break;
	default:
		strcat(midcode,"BUG: Unknown operator");
		break;
	}
	strcat(midcode,"if ");
	genExp(tree->child[1]);
}
/* Procedure cGen recursively generates code by
* tree traversal
*/
static void cGen( TreeNode * tree)
{
	int next;
	if (tree != NULL)
	{ 
		switch (tree->nodekind) {
		case StmtK:
			next=newLabel();
			genStmt(tree,next);
			break;
		case ExpK:
			genExp(tree);
			break;
		default:
			break;
		}
		cGen(tree->sibling);
	}
}

/**********************************************/
/* the primary function of the code generator */
/**********************************************/
/* Procedure codeGen generates code to a code
* file by traversal of the syntax tree. The
* second parameter (codefile) is the file name
* of the code file, and is used to print the
* file name as a comment in the code file
*/
void codeGen(TreeNode * syntaxTree, char * codefile)
{  
	midcode= (char *)malloc(200000);
	strcpy(midcode,"Mid Code of Tiny+:\n");//
	cGen(syntaxTree->child[0]);
	printf("%s\n",midcode);
	/* finish */
	/*emitComment("End of execution.");
	emitRO("HALT",0,0,0,"");*/
}
