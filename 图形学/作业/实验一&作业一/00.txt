
//
#include<gl/glut.h>
//#include<gl/glu.h> //glut.h自动包含了glu.h 和 gl.h
//#include<gl/gl.h>
#include<stdlib.h>

void myinit()

{

	// attributes

	glClearColor(1.0,1.0,1.0,0.0);

	glColor3f(1.0,0.0,0.0);



	// set up viewing

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	gluOrtho2D(0.0, 50.0,0.0,50.0);

	//glMatrixMode(GL_MODELVIEW);

}



void display(void)

{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	GLfloat vertices[3][3] = {{0.0,0.0,0.0}, {25.0, 50.0,0.0}, {50.0,0.0,0.0}};

	// an arbitrary triangle in the plane z = 0;

	GLfloat p[3] = {7.5, 5.0, 0.0};

	// or set to any desired initial point inside the triangle;

	int  j,k;

	int  rand();
	glPointSize(2.0);//not needed
	glBegin(GL_POINTS);

	

	for (k = 0; k < 5000; k++)

	{

		/* pick a random vertex from 0,1,2*/

		j = rand()%3;

		// compute new location;

		p[0] = (p[0]+vertices[j][0])/2;
		p[1] = (p[1]+vertices[j][1])/2;
		// display new point

		glVertex3f(p[0],p[1],p[2]);

	}
	glEnd();
	//glutSwapBuffers();
	glFlush();
}

void renderScene(void)

{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	
	glBegin(GL_POINTS);
	glVertex3f(-0.5,-0.5,0.0);
	glVertex3f(0.5,0.0,0.0);
	//glVertex3f(0.0,0.5,0.0);
	glEnd();
	glutSwapBuffers();
	glFlush();
}


int main(int argc, char* argv[])
{
	glutInit(&argc, (char**) argv);
	glutInitDisplayMode( GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500,500);

	glutInitWindowPosition(0,0);

	glutCreateWindow("Simple OpenGL Example");

	myinit();
	glutDisplayFunc(display);
	glutMainLoop();//enters the GLUT event processing loop.
	return 0;
}
