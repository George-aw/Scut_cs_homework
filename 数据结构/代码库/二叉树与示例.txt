#include<iostream>
using namespace std;
//the dictionary abstract class
int max(int a,int b)
{return a>b?a:b;}
class BstNode
{
public:
	int data;
	BstNode*left;
	BstNode*right;
	BstNode(){left=right=NULL;}
	BstNode(int data1,BstNode*left1=NULL,BstNode*right1=NULL)
	{
		data=data1;left=left1;right=right1;
	}
	~BstNode(){}
	void setvalue(int e){data=e;}
	void setleft(BstNode*b){left=b;}
	void setright(BstNode*b){right=b;}
	bool isleaf(){return(left==NULL)&&(right==NULL);}
};
class BST:public BstNode
{
public:
	BstNode*root;
	int nodecount;
	int findhelp(BstNode*root,int key)
	{
		if(root=NULL)return NULL;//空树
		if(key<root->data)return findhelp(root->left,key);//查找左子树
		else if(key>root->data)return findhelp(root->right,key);//查找右子树
		else return root->data;//找到
	}
	BstNode*inserthelp(BstNode*root,int item)
	{
		if(root==NULL)//空树：建节点
			return new BstNode(item,NULL,NULL);
		if(item<root->data)root->setleft(inserthelp(root->left,item));
		else root->setright(inserthelp(root->right,item));
		return root;
	}
	BstNode*deletemin(BstNode*root)
	{
		if(root->left==NULL)return root->right;
		else 
		{
			root->setleft(deletemin(root->left));
			return root;
		}
	}
	BstNode*getmin(BstNode*root)
	{
		if(root->left==NULL)return root;
		else return getmin(root->left);
	}
	BstNode*removehelp(BstNode*root,int k)
	{
		if(root==NULL)return NULL;//空树无待删除对象
		else if(k<root->data)root->setleft(removehelp(root->left,k));
		else if(k>root->data)root->setright(removehelp(root->right,k));
		else
		{
			BstNode*temp=root;
			if(root->left==NULL)
			{
				root=root->right;
				delete temp;
			}
			else if(root->right==NULL)
			{
				root=root->left;
				delete temp;
			}
			else 
			{
				BstNode*temp=getmin(root->right);
				root->setvalue(temp->data);
				root->setright(deletemin(root->right));
				delete temp;
			}
		}
		return root;
	}
	void clearhelp(BstNode*root)
	{
		if(root==NULL)return;
		clearhelp(root->left);
		clearhelp(root->right);
		delete root;
	}
	void  inorderprinthelp(BstNode*root,int level)
	{
		if(root==NULL)return;
		inorderprinthelp(root->left,level+1);
		for(int i=0;i<level;i++)cout<<" ";
		cout<<root->data<<endl;
		inorderprinthelp(root->right,level+1);
	}
	void preorderprinthelp(BstNode*root,int level)
	{
		if(root==NULL)return;
		for(int i=0;i<level;i++)cout<<" ";
		cout<<root->data<<endl;
		preorderprinthelp(root->left,level+1);
		preorderprinthelp(root->right,level+1);
	}
	void postorderprinthelp(BstNode*root,int level)
	{
		if(root==NULL)return;
		for(int i=0;i<level;i++)cout<<" ";
		cout<<root->data<<endl;
		postorderprinthelp(root->left,level+1);
		postorderprinthelp(root->right,level+1);
	}
	BST(){root=NULL;nodecount=0;}
	~BST(){clearhelp(root);}
	void clear()
	{
		clearhelp(root);
		root=NULL;
		nodecount=0;
	}
	void insert(const int item)
	{
		root=inserthelp(root,item);
		nodecount++;
	}
	int remove(int k)
	{
		int temp=findhelp(root,k);
		if(temp!=NULL)
		{
			root=removehelp(root,k);
			nodecount--;
		}
		return temp;
	}
	int removeany()
	{
		if(root!=NULL)
		{
			int temp=root->data;
			root=removehelp(root,root->data);
			nodecount--;
			return temp;
		}
		else return NULL;
	}
	int find(int k){return findhelp(root,k);}
	int size(){return nodecount;}
	void print()
	{
		if(root==NULL)cout<<"empty"<<endl;
		else 
		{
			preorderprinthelp(root,0);
			inorderprinthelp(root,0);
			postorderprinthelp(root,0);
		}
	}
	int height(BstNode*root)
	{
		if(root==NULL)return 0;
		else return 1+max(height(root->left),height(root->right));
	}
};
int main()
{
	int elem;
	char kon;
	
	int n;
	cin>>n;
	while(n--)
	{
		kon='\0';
		BST*tree=new BST;
		while(kon!='\n')
		{
			//BstNode*root=new BstNode;
			cin>>elem;
			cin.get(kon);
			tree->insert(elem);
		}
		cout<<tree->height(tree->root)<<endl;
	}
}