#include<iostream>
using namespace std;
class Edge
{
	int vert,wt;
public:
	Edge(){vert=-1;wt=-1;}
	Edge(int v,int w){vert=v;wt=w;}
	int vertex(){return vert;}
	int weight(){return wt;}
};
class Graphm
{
private:
	int numVertex,numEdge;//
	int **matrix;//pointer to adjavency matrix
	int *mark;//pointer to mark array
public:
	Graphm(int numVert){Init(numVert);}
	~Graphm()
	{
		delete[]mark;
		for(int i=0;i<numVertex;i++)delete[]matrix[i];
		delete[]matrix;	
	}
	void Init(int n)
	{
		int i;
		numVertex=n;
		numEdge=0;
		mark=new int[n];
		for(i=0;i<numVertex;i++)
			mark[i]=-1;
		matrix=(int**)new int*[numVertex];
		for(i=0;i<numVertex;i++)
			matrix[i]=new int[numVertex];
		for(i=0;i<numVertex;i++)
			for(int j=0;j<numVertex;j++)
				matrix[i][j]=0;		
	}
	int n(){return numVertex;}
	int e(){return numEdge;}
	int first(int v)
	{
		for(int i=0;i<numVertex;i++)
			if(matrix[v][i]!=0)return i;
		return numVertex;
	}
	int next(int v,int w)
	{
		for(int i=w+1;i<numVertex;i++)
			if(matrix[v][i]!=0)return i;
		return numVertex;
	}
	void setEdge(int v1,int v2,int wt)
	{
		if(wt<=0)cout<<"illegal weight value"<<endl;
		if(matrix[v1][v2]==0)numEdge++;
		matrix[v1][v2]=wt;
	}
	void delEdge(int v1,int v2)
	{
		if(matrix[v1][v2]!=0)numEdge--;
		matrix[v1][v2]=0;
	}
	bool isEdge(int i,int j)
	{
		return matrix[i][j]!=0;
	}
	int weight(int v1,int v2){return matrix[v1][v2];}
	int getMark(int v){return mark[v];}
	void setMark(int v,int val){mark[v]=val;}
};
struct BstNode
{
	int data;
	BstNode*next;
	BstNode(){data=0;next=NULL;}
	BstNode(int dt){data=dt;next=NULL;}
};
struct queue
{
	BstNode*front;
	BstNode*rear;
	int size;
	queue(int sz=0){front=rear=new BstNode;size=sz;}
	~queue(){clear();delete front;}
	void clear()
	{
		while(front->next!=NULL)rear=front;
		delete rear;
		rear=front;
		size=0;
	}
	void enqueue(BstNode*in)
	{
		rear->next=in;
		rear=rear->next;
		size++;
	}
	int dequeue()
	{
		if(size==0)return NULL;
		else 
		{
			int it=front->next->data;
			BstNode*temp=front->next;
			front->next=temp->next;
			if(rear==temp)rear=front;
			delete temp;
			size--;
			return it;
		}
	}
	int frontvalue()
	{
		return front->next->data;
	}
	BstNode*frontNode()
	{
		return front->next;
	}
};
void tophelp(Graphm*g,int v)
{
	g->setMark(v,1);
	for(int w=g->first(v);w<g->n();w=g->next(v,w))
		if(g->getMark(w)==-1)tophelp(g,w);
	//printout(v);
}
/*void topsort(Graphm*g)
{
	int i;
	for(i=0;i<g->n();i++)g->setMark(i,-1);
	for(i=0;i<g->n();i++)
		if(g->getMark(i)==-1)tophelp(g,i);
}*/
void swap(int*a,int i,int j)
{
	int tmp;
	tmp=a[i];
	a[i]=a[j];
	a[j]=tmp;
}
void inssort(int*arr,int n)
{
	for(int i=1;i<n;i++)
		for(int j=i;(j>0)&&(arr[j]>arr[j-1]);j++)
			swap(arr,j,j-1);
}
void selsort(int a[],int n)
{
	for(int i=0;i<n-1;i++)
	{
		int lowindex=i;
		for(int j=n-1;j>i;j--)
		{
			if(a[j]>a[lowindex])lowindex=j;
		}
		swap(a,i,lowindex);
	}
}
void topsort(Graphm*g)
{
	queue*q=new queue(0);
	int*Count=new int[g->n()];
	int v,w;
	for(v=0;v<g->n();v++)
		Count[v]=0;
	for(v=0;v<g->n();v++)
		for(w=g->first(v);w<g->n();w=g->next(v,w))
			Count[w]++;
	for(v=0;v<g->n();v++)
		if(Count[v]==0)q->enqueue(new BstNode(v));
	/*while(q->size!=0)
	{
		v=q->dequeue();
		//printout(v);
		for(w=g->first(v);w<g->n();w=g->next(v,w))
		{
			Count[w]--;
			if(Count[w]==0)q->enqueue(new BstNode(w));
		}
	}*/
	selsort(Count,g->n());
	cout<<Count[0]<<endl;
}
int main()
{
	int n;
	cin>>n;
	while(n--)
	{
		int numvert;
		int numedge;
		cin>>numvert;
		cin>>numedge;
		Graphm*g=new Graphm(numvert);
		int i;
		for(i=0;i<numedge;i++)
		{
			int from,to;
			cin>>from>>to;
			g->setEdge(from-1,to-1,1);
		}
		topsort(g);
	}
}


#include<iostream>
using namespace std;
class Edge
{
	int vert,wt;
public:
	Edge(){vert=-1;wt=-1;}
	Edge(int v,int w){vert=v;wt=w;}
	int vertex(){return vert;}
	int weight(){return wt;}
};
class Graphm
{
private:
	int numVertex,numEdge;//
	int **matrix;//pointer to adjavency matrix
	int *mark;//pointer to mark array
public:
	Graphm(int numVert){Init(numVert);}
	~Graphm()
	{
		delete[]mark;
		for(int i=0;i<numVertex;i++)delete[]matrix[i];
		delete[]matrix;	
	}
	void Init(int n)
	{
		int i;
		numVertex=n;
		numEdge=0;
		mark=new int[n];
		for(i=0;i<numVertex;i++)
			mark[i]=-1;
		matrix=(int**)new int*[numVertex];
		for(i=0;i<numVertex;i++)
			matrix[i]=new int[numVertex];
		for(i=0;i<numVertex;i++)
			for(int j=0;j<numVertex;j++)
				matrix[i][j]=0;		
	}
	int n(){return numVertex;}
	int e(){return numEdge;}
	int first(int v)
	{
		for(int i=0;i<numVertex;i++)
			if(matrix[v][i]!=0)return i;
		return numVertex;
	}
	int next(int v,int w)
	{
		for(int i=w+1;i<numVertex;i++)
			if(matrix[v][i]!=0)return i;
		return numVertex;
	}
	void setEdge(int v1,int v2,int wt)
	{
		if(wt<=0)cout<<"illegal weight value"<<endl;
		if(matrix[v1][v2]==0)numEdge++;
		matrix[v1][v2]=wt;
	}
	void delEdge(int v1,int v2)
	{
		if(matrix[v1][v2]!=0)numEdge--;
		matrix[v1][v2]=0;
	}
	bool isEdge(int i,int j)
	{
		return matrix[i][j]!=0;
	}
	int weight(int v1,int v2){return matrix[v1][v2];}
	int getMark(int v){return mark[v];}
	void setMark(int v,int val){mark[v]=val;}
};
struct BstNode
{
	int data;
	BstNode*next;
	BstNode(){data=0;next=NULL;}
	BstNode(int dt){data=dt;next=NULL;}
};
struct queue
{
	BstNode*front;
	BstNode*rear;
	int size;
	queue(int sz=0){front=rear=new BstNode;size=sz;}
	~queue(){clear();delete front;}
	void clear()
	{
		while(front->next!=NULL)rear=front;
		delete rear;
		rear=front;
		size=0;
	}
	void enqueue(BstNode*in)
	{
		rear->next=in;
		rear=rear->next;
		size++;
	}
	int dequeue()
	{
		if(size==0)return NULL;
		else 
		{
			int it=front->next->data;
			BstNode*temp=front->next;
			front->next=temp->next;
			if(rear==temp)rear=front;
			delete temp;
			size--;
			return it;
		}
	}
	int frontvalue()
	{
		return front->next->data;
	}
	BstNode*frontNode()
	{
		return front->next;
	}
};
void tophelp(Graphm*g,int v)
{
	g->setMark(v,1);
	for(int w=g->first(v);w<g->n();w=g->next(v,w))
		if(g->getMark(w)==-1)tophelp(g,w);
	//printout(v);
}
/*void topsort(Graphm*g)
{
	int i;
	for(i=0;i<g->n();i++)g->setMark(i,-1);
	for(i=0;i<g->n();i++)
		if(g->getMark(i)==-1)tophelp(g,i);
}*/
void swap(int*a,int i,int j)
{
	int tmp;
	tmp=a[i];
	a[i]=a[j];
	a[j]=tmp;
}
void inssort(int*arr,int n)
{
	for(int i=1;i<n;i++)
		for(int j=i;(j>0)&&(arr[j]>arr[j-1]);j++)
			swap(arr,j,j-1);
}
void selsort(int a[],int n)
{
	for(int i=0;i<n-1;i++)
	{
		int lowindex=i;
		for(int j=n-1;j>i;j--)
		{
			if(a[j]>a[lowindex])lowindex=j;
		}
		swap(a,i,lowindex);
	}
}
void topsort(Graphm*g,int numvert)
{
	queue*q=new queue(0);
	int*Count=new int[g->n()];
	int v,w;
	for(v=0;v<g->n();v++)
		Count[v]=0;
	for(v=0;v<g->n();v++)
		for(w=g->first(v);w<g->n();w=g->next(v,w))
			Count[w]++;
	for(v=0;v<g->n();v++)
		if(Count[v]==0)q->enqueue(new BstNode(v));
	int setcount=0;
	while(q->size!=0)
	{
		v=q->dequeue();
		setcount++;
		for(w=g->first(v);w<g->n();w=g->next(v,w))
		{
			Count[w]--;
			if(Count[w]==0)q->enqueue(new BstNode(w));
		}
	}
	if(setcount>=numvert)cout<<"NO"<<endl;
	else cout<<"YES"<<endl;
}
int main()
{
	int n;
	cin>>n;
	while(n--)
	{
		int numvert;
		int numedge;
		cin>>numvert;
		cin>>numedge;
		Graphm*g=new Graphm(numvert);
		int i;
		for(i=0;i<numedge;i++)
		{
			int from,to;
			cin>>from>>to;
			g->setEdge(from-1,to-1,1);
		}
		topsort(g,numvert);
	}
}



#include<iostream>
using namespace std;
class Edge
{
	int vert;
	int wt;
public:
	Edge(){vert=-1;wt=-1;}
	Edge(int v,int  w){vert=v;wt=w;}
	int vertex(){return vert;}
	int  weight(){return wt;}
};
class Graphm
{
private:
	int numVertex,numEdge;//
	int **matrix;//pointer to adjavency matrix
	int *mark;//pointer to mark array
public:
	Graphm(int numVert){Init(numVert);}
	~Graphm()
	{
		delete[]mark;
		for(int i=0;i<numVertex;i++)delete[]matrix[i];
		delete[]matrix;	
	}
	void Init(int n)
	{
		int i;
		numVertex=n;
		numEdge=0;
		mark=new int[n];
		for(i=0;i<numVertex;i++)
			mark[i]=-1;
		matrix=(int **)new int *[numVertex];
		for(i=0;i<numVertex;i++)
			matrix[i]=new int [numVertex];
		for(i=0;i<numVertex;i++)
			for(int j=0;j<numVertex;j++)
				matrix[i][j]=0;		
	}
	int n(){return numVertex;}
	int e(){return numEdge;}
	int first(int v)
	{
		for(int i=0;i<numVertex;i++)
			if(matrix[v][i]!=0)return i;
		return numVertex;
	}
	int next(int v,int w)
	{
		for(int i=w+1;i<numVertex;i++)
			if(matrix[v][i]!=0)return i;
		return numVertex;
	}
	void setEdge(int v1,int v2,int  wt)
	{
		if(wt<=0)cout<<"illegal weight value"<<endl;
		if(matrix[v1][v2]==0)numEdge++;
		if(wt<matrix[v1][v2]||wt==0)matrix[v1][v2]=wt;
	}
	void delEdge(int v1,int v2)
	{
		if(matrix[v1][v2]!=0)numEdge--;
		matrix[v1][v2]=0;
	}
	bool isEdge(int i,int j)
	{
		return matrix[i][j]!=0;
	}
	int  weight(int v1,int v2){return matrix[v1][v2];}
	int getMark(int v){return mark[v];}
	void setMark(int v,int val){mark[v]=val;}
};
int minVertex(Graphm*G,int *D)
{
	int i,v=-1;
	for(i=0 ;i<G->n();i++)
		if(G->getMark(i)==-1){v=i;break;}
		for(i++;i<G->n();i++)
			if((G->getMark(i)==-1)&&(D[i]<D[v]))v=i;
		return v;
}
void Dijkstra(Graphm*g,int *D,int s)
{
	int i,v=s,w;
	for(i=0;i<g->n();i++)
	{
		v=minVertex(g,D);
		if(D[v]==1000000000)return;
		g->setMark(v,1);
		for(w=g->first(v);w<g->n();w=g->next(v,w))
			if(D[w]>(D[v]+g->weight(v,w)))
				D[w]=D[v]+g->weight(v,w);
	}
}
int main()
{
	int numvert;
	int numedge,begin,end;
	cin>>numvert;
	cin>>numedge;
	cin>>begin;
	cin>>end;
	Graphm*g=new Graphm(numvert);
	int i;
	for(i=0;i<numedge;i++)
	{
		int from,to;
		int weight;
		cin>>from>>to>>weight;
		g->setEdge(from-1,to-1,weight);
	}
	int *D=new int [g->n()];
	for(i=0;i<g->n();i++)D[i]=1000000000;
	D[begin-1]=0;
	Dijkstra(g,D,begin-1);
	cout<<D[end-1]<<endl;
}