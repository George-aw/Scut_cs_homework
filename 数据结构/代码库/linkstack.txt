?/stack abstract class
template<typename E>class Stack
{
	private:
	void operator=(const Stack&){}//protect assingment
	Stack(const Stack&){}//protect copy constructor
	public:
	Stack(){}//default constructor
	virtual ~Stack(){}//Base destructor
	//reinitialize the stack.the user is responsible for reclainming the storage used by the stack elements
	virtual void clear()=0;
	//push an element onto the top of the stack
	//it the element being pushed onto the stack
	virtual void push(const E&it)=0;
	//remove the element at the top of the stack 
	//return:the elelment at the top of the stack
	virtual E pop()=0;
	//return:a copy of the top element
	virtual const E&topValue()const=0;
	//return:the number of elements in the stack.
	virtual int length()const=0;
};
//Linked stack implementation
template<typename E>class LStack:public Stack<E>
{
	private:
	Link<E>*top;//pointer to first element
	int size;//number of elements
	public:
	LStack(int sz=defaultSize)//constructor
	{top=NULL;size=0;}
	~LStack(){clear();}//destructor
	void clear()
	{
		while(top!=NULL)
		{
			Link<E>*temp=top;
			top=top->next;
			delete temp;
		}
		size=0;
	}	
	void push(const E&it)
	{//put it on stack
		top=new Link<E>(it,top);
		size++;
	}
	E pop()
	{
		Assert(top!=NULL,"Stack is empty");
		E it=top->element;
		Link<E>*ltemp=top->next;
		delete top;
		top=ltemp;
		size--;
		return it;
	}
	const E&topValue()const
	{//RETURN top value
		Assert(top!=0,"Stack is empty");
		return top->element;
	}
	int length()const
	{return size;}//return length
};