//Array-based queue implementation
template<typename E>class AQueue:public Queue<E>
{
private:
	int maxSize;//Maxnum  size of queue
	int front;//Index of front element
	int rear;//Index of rear element
	E*listArray;//Array holding queue elements
public:
	AQueue(int size=defaultSize)
	{//constructor
		//make list array one position larger for empty slot
		maxSize=size+1;
		rear=0;front=1;
		listArray=new E[maxSize];
	}
	~AQueue(){delete[]listArray;}//destructor
	void clear(){rear=0;front=1;}//reinitialize
	void enqueue(const E&it)
	{
		//put it in queue
		Assert(((rear+2)%maxSize)!=front,"Queue is full");
		rear=(rear+1)%maxSize;//circular increment
		return it;
	}
	const E&frontValue()const
	{
		//get front value
		Assert(length()!=0,"queue is empty");
		return listArray[front];
	}
	virtual int length()const
	{	
		return((rear+maxSize)-front+1)%maxSize;
	}
};